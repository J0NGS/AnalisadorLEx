package com.jongs.AnalisadorLex.Compilador;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\002\002\000\002\003\004\000\002\004\004\000" +
    "\002\004\002\000\002\005\003\000\002\005\002\000\002" +
    "\006\005\000\002\006\003\000\002\025\004\000\002\025" +
    "\002\000\002\007\003\000\002\007\002\000\002\010\005" +
    "\000\002\010\003\000\002\011\004\000\002\031\003\000" +
    "\002\031\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\005\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\005\000\002\053\002\000\002\054\002\000" +
    "\002\022\013\000\002\023\005\000\002\055\002\000\002" +
    "\056\002\000\002\023\013\000\002\024\005\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\051\005\000\002\052\005\000\002" +
    "\052\003\000\002\045\005\000\002\050\006\000\002\047" +
    "\005\000\002\047\003\000\002\012\005\000\002\013\004" +
    "\000\002\044\003\000\002\044\002\000\002\034\004\000" +
    "\002\043\005\000\002\027\004\000\002\014\003\000\002" +
    "\014\002\000\002\015\005\000\002\015\003\000\002\015" +
    "\005\000\002\015\003\000\002\017\003\000\002\017\005" +
    "\000\002\017\006\000\002\041\007\000\002\035\003\000" +
    "\002\035\003\000\002\040\005\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\036\004\000\002\037\004" +
    "\000\002\037\004\000\002\030\004\000\002\030\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\010\002\ufffb\003\007\017\011\001\002\000" +
    "\010\002\ufffb\003\007\017\011\001\002\000\004\002\201" +
    "\001\002\000\010\002\ufffb\003\007\017\011\001\002\000" +
    "\004\002\ufffc\001\002\000\010\002\ufffb\003\007\017\011" +
    "\001\002\000\004\024\176\001\002\000\010\002\ufffb\003" +
    "\007\017\011\001\002\000\010\020\022\022\uffc6\024\020" +
    "\001\002\000\014\002\ufff8\003\ufff8\017\ufff8\021\ufff8\023" +
    "\154\001\002\000\014\002\ufff8\003\ufff8\017\ufff8\021\ufff8" +
    "\023\154\001\002\000\014\002\ufff8\003\ufff8\017\ufff8\021" +
    "\ufff8\023\154\001\002\000\016\002\ufff8\003\ufff8\017\ufff8" +
    "\021\ufff8\022\uffc7\023\154\001\002\000\016\002\uffce\003" +
    "\uffce\015\151\017\uffce\021\uffce\023\uffce\001\002\000\004" +
    "\022\146\001\002\000\030\002\uffc1\003\uffc1\017\uffc1\021" +
    "\uffc1\022\uffc1\023\uffc1\024\027\026\023\033\034\035\031" +
    "\051\033\001\002\000\020\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\016\uffec\001\002\000\016\002\uffc2" +
    "\003\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2\001\002\000" +
    "\026\002\uffbf\003\uffbf\013\124\014\125\015\127\017\uffbf" +
    "\021\uffbf\022\uffbf\023\uffbf\050\142\001\002\000\016\002" +
    "\uffc5\003\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\001\002" +
    "\000\030\002\uffbc\003\uffbc\013\uffbc\014\uffbc\015\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\036\uffbc\050\uffbc\001\002" +
    "\000\020\004\053\005\046\006\051\007\055\010\045\011" +
    "\044\016\132\001\002\000\012\024\027\026\023\035\031" +
    "\051\033\001\002\000\016\002\uffbd\003\uffbd\017\uffbd\021" +
    "\uffbd\022\uffbd\023\uffbd\001\002\000\020\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\016\uffeb\001\002\000" +
    "\004\024\035\001\002\000\006\034\uffca\050\040\001\002" +
    "\000\004\034\037\001\002\000\014\002\uffcc\003\uffcc\017" +
    "\uffcc\021\uffcc\023\uffcc\001\002\000\004\024\035\001\002" +
    "\000\004\034\uffcb\001\002\000\004\036\123\001\002\000" +
    "\016\004\053\005\046\006\051\007\055\010\045\011\044" +
    "\001\002\000\004\061\122\001\002\000\004\061\121\001" +
    "\002\000\014\024\uffb4\027\uffb4\030\uffb4\031\uffb4\035\uffb4" +
    "\001\002\000\014\024\uffb3\027\uffb3\030\uffb3\031\uffb3\035" +
    "\uffb3\001\002\000\014\024\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\035\uffb1\001\002\000\014\024\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\035\uffb0\001\002\000\014\024\064\027\061\030\071" +
    "\031\057\035\066\001\002\000\014\024\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\035\uffb5\001\002\000\014\024\uffb2\027\uffb2" +
    "\030\uffb2\031\uffb2\035\uffb2\001\002\000\004\061\056\001" +
    "\002\000\014\024\uffaf\027\uffaf\030\uffaf\031\uffaf\035\uffaf" +
    "\001\002\000\004\056\uffd1\001\002\000\004\056\074\001" +
    "\002\000\004\056\uffd3\001\002\000\030\002\uffe2\003\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\017\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\036\uffe2\050\uffe2\001\002\000\030\002\uffe6\003\uffe6" +
    "\013\uffe6\014\uffe6\015\uffe6\017\uffe6\021\uffe6\022\uffe6\023" +
    "\uffe6\036\uffe6\050\uffe6\001\002\000\030\002\uffe7\003\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\017\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\036\uffe7\050\uffe7\001\002\000\030\002\uffe4\003\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\036\uffe4\050\uffe4\001\002\000\012\024\027\026\023" +
    "\035\031\051\033\001\002\000\030\002\uffe3\003\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3" +
    "\036\uffe3\050\uffe3\001\002\000\030\002\uffbb\003\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\036\uffbb\050\uffbb\001\002\000\004\056\uffd2\001\002\000" +
    "\004\036\073\001\002\000\030\002\uffe5\003\uffe5\013\uffe5" +
    "\014\uffe5\015\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\036" +
    "\uffe5\050\uffe5\001\002\000\010\053\075\054\077\055\076" +
    "\001\002\000\032\002\uffe1\003\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\036\uffe1\037\uffe0" +
    "\050\uffe1\001\002\000\030\002\uffd9\003\uffd9\013\uffd9\014" +
    "\uffd9\015\uffd9\017\uffd9\021\uffd9\022\uffd9\023\uffd9\036\uffd9" +
    "\050\uffd9\001\002\000\032\002\uffdd\003\uffdd\013\uffdd\014" +
    "\uffdd\015\uffdd\017\uffdd\021\uffdd\022\uffdd\023\uffdd\036\uffdd" +
    "\037\uffdc\050\uffdd\001\002\000\004\037\101\001\002\000" +
    "\014\041\103\042\102\043\105\044\104\045\106\001\002" +
    "\000\006\060\uffd7\061\uffd7\001\002\000\006\060\uffd8\061" +
    "\uffd8\001\002\000\006\060\uffd5\061\uffd5\001\002\000\006" +
    "\060\uffd6\061\uffd6\001\002\000\006\060\uffd4\061\uffd4\001" +
    "\002\000\004\060\110\001\002\000\004\040\uffdb\001\002" +
    "\000\004\040\112\001\002\000\030\002\uffda\003\uffda\013" +
    "\uffda\014\uffda\015\uffda\017\uffda\021\uffda\022\uffda\023\uffda" +
    "\036\uffda\050\uffda\001\002\000\004\037\114\001\002\000" +
    "\014\041\103\042\102\043\105\044\104\045\106\001\002" +
    "\000\004\061\116\001\002\000\004\040\uffdf\001\002\000" +
    "\004\040\120\001\002\000\030\002\uffde\003\uffde\013\uffde" +
    "\014\uffde\015\uffde\017\uffde\021\uffde\022\uffde\023\uffde\036" +
    "\uffde\050\uffde\001\002\000\014\024\uffae\027\uffae\030\uffae" +
    "\031\uffae\035\uffae\001\002\000\014\024\uffad\027\uffad\030" +
    "\uffad\031\uffad\035\uffad\001\002\000\030\002\uffab\003\uffab" +
    "\013\124\014\125\015\127\017\uffab\021\uffab\022\uffab\023" +
    "\uffab\036\uffab\050\uffab\001\002\000\012\024\uffe8\026\uffe8" +
    "\035\uffe8\051\uffe8\001\002\000\012\024\uffea\026\uffea\035" +
    "\uffea\051\uffea\001\002\000\030\002\uffba\003\uffba\013\uffba" +
    "\014\uffba\015\uffba\017\uffba\021\uffba\022\uffba\023\uffba\036" +
    "\uffba\050\uffba\001\002\000\012\024\uffe9\026\uffe9\035\uffe9" +
    "\051\uffe9\001\002\000\012\024\027\026\023\035\031\051" +
    "\033\001\002\000\030\002\uffac\003\uffac\013\uffac\014\uffac" +
    "\015\uffac\017\uffac\021\uffac\022\uffac\023\uffac\036\uffac\050" +
    "\uffac\001\002\000\004\035\133\001\002\000\004\024\135" +
    "\001\002\000\004\036\141\001\002\000\006\015\137\036" +
    "\uffb7\001\002\000\004\036\uffb8\001\002\000\004\024\135" +
    "\001\002\000\004\036\uffb6\001\002\000\016\002\uffb9\003" +
    "\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\001\002\000\012" +
    "\024\027\026\023\035\031\051\033\001\002\000\012\024" +
    "\027\026\023\035\031\051\033\001\002\000\016\002\uffbe" +
    "\003\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe\001\002\000" +
    "\016\002\uffc0\003\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0" +
    "\001\002\000\024\002\uffc1\003\uffc1\017\uffc1\021\uffc1\023" +
    "\uffc1\024\027\026\023\035\031\051\033\001\002\000\014" +
    "\002\uffc8\003\uffc8\017\uffc8\021\uffc8\023\uffc8\001\002\000" +
    "\014\002\uffc3\003\uffc3\017\uffc3\021\uffc3\023\uffc3\001\002" +
    "\000\004\024\020\001\002\000\014\002\uffcf\003\uffcf\017" +
    "\uffcf\021\uffcf\023\uffcf\001\002\000\010\002\uffc4\003\uffc4" +
    "\017\uffc4\001\002\000\014\002\ufff6\003\ufff6\017\ufff6\021" +
    "\ufff6\024\166\001\002\000\012\002\ufff2\003\ufff2\017\ufff2" +
    "\021\156\001\002\000\012\002\ufff0\003\ufff0\017\ufff0\025" +
    "\160\001\002\000\010\002\uffed\003\uffed\017\uffed\001\002" +
    "\000\012\002\uffee\003\uffee\017\uffee\050\163\001\002\000" +
    "\010\002\ufff1\003\ufff1\017\ufff1\001\002\000\010\002\ufff3" +
    "\003\ufff3\017\ufff3\001\002\000\004\025\160\001\002\000" +
    "\010\002\uffef\003\uffef\017\uffef\001\002\000\012\002\ufff7" +
    "\003\ufff7\017\ufff7\021\ufff7\001\002\000\014\002\ufff4\003" +
    "\ufff4\017\ufff4\021\ufff4\050\170\001\002\000\012\002\ufff9" +
    "\003\ufff9\017\ufff9\021\ufff9\001\002\000\004\024\166\001" +
    "\002\000\012\002\ufff5\003\ufff5\017\ufff5\021\ufff5\001\002" +
    "\000\010\002\uffc9\003\uffc9\017\uffc9\001\002\000\010\002" +
    "\uffcd\003\uffcd\017\uffcd\001\002\000\010\002\uffd0\003\uffd0" +
    "\017\uffd0\001\002\000\004\002\uffff\001\002\000\010\020" +
    "\ufffa\022\ufffa\024\ufffa\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\ufffe\001\002\000\004\002\001\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\200\000\016\002\004\003\012\012\003\043\011\045" +
    "\005\051\007\001\001\000\016\002\201\003\012\012\003" +
    "\043\011\045\005\051\007\001\001\000\002\001\001\000" +
    "\016\002\177\003\012\012\003\043\011\045\005\051\007" +
    "\001\001\000\002\001\001\000\016\002\176\003\012\012" +
    "\003\043\011\045\005\051\007\001\001\000\002\001\001" +
    "\000\016\002\174\003\012\012\003\043\011\045\005\051" +
    "\007\001\001\000\014\013\015\034\016\044\020\050\014" +
    "\052\013\001\001\000\006\004\154\011\173\001\001\000" +
    "\006\004\154\011\172\001\001\000\006\004\154\011\171" +
    "\001\001\000\006\004\154\011\152\001\001\000\002\001" +
    "\001\000\004\027\146\001\001\000\014\014\025\015\023" +
    "\017\024\031\027\041\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\033\051\036\046\037\053\042" +
    "\047\001\001\000\006\017\041\031\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\047\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\033\051\036\046\037\053\042\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\020\067" +
    "\021\062\022\064\023\066\024\061\026\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\071\031\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\112\001\001\000\002\001\001\000\004\055\077\001\001" +
    "\000\002\001\001\000\004\032\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\032\114\001\001\000\002\001\001\000\004\054" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\127\030\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\130\031\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\133\040\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\035\137\040\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\144\017\024\031\027\041" +
    "\031\001\001\000\012\015\143\017\024\031\027\041\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\014" +
    "\147\015\023\017\024\031\027\041\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\052\151\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\166\006\164" +
    "\001\001\000\004\025\156\001\001\000\006\007\161\010" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.scan(); 
    }


//----------------------------------Funções de erro----------------------------------
    public void report_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1 ) + " - Token: " + token +"      |"+ message;
        System.out.println("\n==========================\n" + errorMessage + "\n");
    }

    public void report_fatal_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1) + " - Token: " + token +"      |"+ message;
        System.out.println("\n==========================\n" + errorMessage + "\n");
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ClassOwl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ClassOwl ::= PrimitiveClass ClassOwl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ClassOwl ::= DefinedClass ClassOwl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassOwl ::= EnumeratedClass ClassOwl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassOwl ::= CoveredClass ClassOwl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassOwl ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassOwl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassHeader ::= CLASS_COLON CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("=========================\n" + "Nova classe detectada: " + i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassHeader",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DisjointClasses ::= DISJOINT_CLASSES_COLON DisjointClassesDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClasses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DisjointClasses ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClasses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DisjointClassesDescription ::= DisjointClassesList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesDescription",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DisjointClassesDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesDescription",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DisjointClassesList ::= CLASS_IDENTIFIERS COMMA DisjointClassesList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DisjointClassesList ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Individuals ::= INDIVIDUALS_COLON IndividualsDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Individuals",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Individuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Individuals",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IndividualsDescription ::= IndividualsList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsDescription",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IndividualsDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsDescription",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IndividualsList ::= INDIVIDUAL_NAME COMMA IndividualsList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IndividualsList ::= INDIVIDUAL_NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DisjointAndIndividuals ::= DisjointClasses Individuals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointAndIndividuals",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Property ::= PROPERTY_IDENTIFIERS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Nova propriedade detectada: " + p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Property",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Property ::= SSN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Nova propriedade detectada: " + s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Property",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LogicalConnector ::= AND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Conectivo lógico encontrado: " + a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LogicalConnector ::= OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Conectivo lógico encontrado: " + o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LogicalConnector ::= NOT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Conectivo lógico encontrado: " + n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PrimitiveSomeItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Classe como propriedade encontrada: " + c + "\n" + "\n---OBJECT PROPERTY---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveSomeItem",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PrimitiveSomeItem ::= DataType 
            {
              Object RESULT =null;
		System.out.println("\n---DATA PROPERTY---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveSomeItem",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PrimitiveSomeItem ::= LEFT_PAREN PrimitiveClassBodyListItem RIGHT_PAREN 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe Aninhada!!---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveSomeItem",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DataType ::= DataTypeInteger 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DataType ::= DataTypeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DataType ::= DataTypeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DataTypeInteger ::= NameSpaceHeader COLON INTEGER 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Type integer encontrado: " + i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeInteger",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println("Type integer encontrado: " + i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println("Inteiro encontrado: " + c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DataTypeInteger ::= NameSpaceHeader COLON INTEGER NT$0 LEFT_BRACKET ComparissonSign CARDINALITY_INTEGER NT$1 RIGHT_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeInteger",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DataTypeFloat ::= NameSpaceHeader COLON FLOAT 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Type float encontrado: " + f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeFloat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println("Type float encontrado: " + f);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println("Float encontrado: " + c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DataTypeFloat ::= NameSpaceHeader COLON FLOAT NT$2 LEFT_BRACKET ComparissonSign CARDINALITY_FLOAT NT$3 RIGHT_BRACKET 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Float c = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeFloat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DataTypeString ::= NameSpaceHeader COLON STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Type string encontrado: " + s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeString",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ComparissonSign ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparissonSign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ComparissonSign ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparissonSign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ComparissonSign ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparissonSign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ComparissonSign ::= EQUAL_LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparissonSign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ComparissonSign ::= EQUAL_GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparissonSign",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NameSpaceHeader ::= NAMESPACE_OWL 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Namespace encontrado: " + o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHeader",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NameSpaceHeader ::= NAMESPACE_RDFS 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Namespace encontrado: " + r);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHeader",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NameSpaceHeader ::= NAMESPACE_XSD 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Namespace encontrado: " + x);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHeader",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CoveredClass ::= ClassHeader CoveredClassDescription DisjointAndIndividuals 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe Coberta!!---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CoveredClass",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CoveredClassDescription ::= CLASS_IDENTIFIERS OR CoveredClassDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CoveredClassDescription",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CoveredClassDescription ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CoveredClassDescription",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EnumeratedClass ::= ClassHeader EnumeratedClassDescription DisjointAndIndividuals 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe Enumerada!!---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumeratedClass",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EnumeratedClassDescription ::= EQUIVALENT_TO_COLON LEFT_BRACE ClassIdentifierList RIGHT_BRACE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EnumeratedClassDescription",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ClassIdentifierList ::= CLASS_IDENTIFIERS COMMA ClassIdentifierList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassIdentifierList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ClassIdentifierList ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassIdentifierList",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PrimitiveClass ::= ClassHeader PrimitiveClassBody DisjointAndIndividuals 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe primitiva!!---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClass",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PrimitiveClassBody ::= EquivalentToPrimitiveClass SubClassOfPrimitiveClass 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EquivalentToPrimitiveClass ::= EquivalentTo 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EquivalentToPrimitiveClass",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EquivalentToPrimitiveClass ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EquivalentToPrimitiveClass",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EquivalentTo ::= EQUIVALENT_TO_COLON PrimitiveClassBodyDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EquivalentTo",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DefinedClass ::= ClassHeader EquivalentTo DisjointAndIndividuals 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe Definida!!---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefinedClass",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SubClassOfPrimitiveClass ::= SUBCLASS_OF_COLON PrimitiveClassBodyDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfPrimitiveClass",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PrimitiveClassBodyDescription ::= PrimitiveClassBodyList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyDescription",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // PrimitiveClassBodyDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyDescription",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PrimitiveClassBodyList ::= PrimitiveClassBodyListItem COMMA PrimitiveClassBodyList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrimitiveClassBodyList ::= PrimitiveClassBodyListItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PrimitiveClassBodyList ::= PrimitiveClassBodyListItem LogicalConnector PrimitiveClassBodyList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PrimitiveClassBodyList ::= ClosureClassBody 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // PrimitiveClassBodyListItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Classe como propriedade encontrada: " + c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItem",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PrimitiveClassBodyListItem ::= Property Quantifier PrimitiveSomeItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItem",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PrimitiveClassBodyListItem ::= LEFT_PAREN PrimitiveClassBodyListItem RIGHT_PAREN PrimitiveClassBodyListItemPair 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItem",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ClosureClassBody ::= Property ONLY LEFT_PAREN ClosureClassBodyListItem RIGHT_PAREN 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe Axioma de fechamento!!---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosureClassBody",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ClosureClassBodyListItem ::= ClassIdentifierOrList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosureClassBodyListItem",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ClosureClassBodyListItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClosureClassBodyListItem",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ClassIdentifierOrList ::= CLASS_IDENTIFIERS OR ClosureClassBodyListItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassIdentifierOrList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Quantifier ::= SOME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Quantifier ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Quantifier ::= Min 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Quantifier ::= Max 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Quantifier ::= Exactly 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Quantifier ::= VALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Quantifier",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Min ::= MIN CARDINALITY_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Min",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Max ::= MAX CARDINALITY_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Max",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Max ::= EXACTLY CARDINALITY_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Max",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PrimitiveClassBodyListItemPair ::= LogicalConnector PrimitiveClassBodyListItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItemPair",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PrimitiveClassBodyListItemPair ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItemPair",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
