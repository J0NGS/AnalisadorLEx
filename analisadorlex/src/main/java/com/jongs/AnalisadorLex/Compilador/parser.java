package com.jongs.AnalisadorLex.Compilador;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\003\000\002\005\002\000" +
    "\002\006\005\000\002\006\003\000\002\025\004\000\002" +
    "\025\002\000\002\007\003\000\002\007\002\000\002\010" +
    "\005\000\002\010\003\000\002\011\004\000\002\012\005" +
    "\000\002\013\004\000\002\014\003\000\002\014\002\000" +
    "\002\015\005\000\002\015\003\000\002\015\005\000\002" +
    "\017\003\000\002\031\002\000\002\017\006\000\002\017" +
    "\006\000\002\030\004\000\002\030\002\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\022" +
    "\010\000\002\023\005\000\002\023\010\000\002\024\005" +
    "\000\002\026\003\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\002\ufffe\003\006\017\007\001\002\000" +
    "\010\002\ufffe\003\006\017\007\001\002\000\004\002\105" +
    "\001\002\000\004\002\uffff\001\002\000\004\024\104\001" +
    "\002\000\004\022\012\001\002\000\014\002\ufffb\003\ufffb" +
    "\017\ufffb\021\ufffb\023\066\001\002\000\022\002\uffec\003" +
    "\uffec\017\uffec\021\uffec\023\uffec\024\015\026\017\035\016" +
    "\001\002\000\014\002\uffed\003\uffed\017\uffed\021\uffed\023" +
    "\uffed\001\002\000\024\002\uffea\003\uffea\013\053\014\054" +
    "\015\057\017\uffea\021\uffea\023\uffea\050\061\001\002\000" +
    "\026\002\uffe8\003\uffe8\013\uffe8\014\uffe8\015\uffe8\017\uffe8" +
    "\021\uffe8\023\uffe8\036\uffe8\050\uffe8\001\002\000\010\024" +
    "\015\026\017\035\016\001\002\000\004\004\uffe7\001\002" +
    "\000\014\002\uffee\003\uffee\017\uffee\021\uffee\023\uffee\001" +
    "\002\000\004\004\022\001\002\000\014\024\031\027\025" +
    "\030\035\031\023\035\032\001\002\000\004\056\uffd2\001" +
    "\002\000\004\056\040\001\002\000\004\056\uffd4\001\002" +
    "\000\026\002\uffda\003\uffda\013\uffda\014\uffda\015\uffda\017" +
    "\uffda\021\uffda\023\uffda\036\uffda\050\uffda\001\002\000\026" +
    "\002\uffde\003\uffde\013\uffde\014\uffde\015\uffde\017\uffde\021" +
    "\uffde\023\uffde\036\uffde\050\uffde\001\002\000\026\002\uffdc" +
    "\003\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\021\uffdc\023" +
    "\uffdc\036\uffdc\050\uffdc\001\002\000\026\002\uffdf\003\uffdf" +
    "\013\uffdf\014\uffdf\015\uffdf\017\uffdf\021\uffdf\023\uffdf\036" +
    "\uffdf\050\uffdf\001\002\000\010\024\015\026\017\035\016" +
    "\001\002\000\026\002\uffdb\003\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\017\uffdb\021\uffdb\023\uffdb\036\uffdb\050\uffdb\001\002" +
    "\000\026\002\uffe6\003\uffe6\013\uffe6\014\uffe6\015\uffe6\017" +
    "\uffe6\021\uffe6\023\uffe6\036\uffe6\050\uffe6\001\002\000\004" +
    "\056\uffd3\001\002\000\004\036\037\001\002\000\026\002" +
    "\uffdd\003\uffdd\013\uffdd\014\uffdd\015\uffdd\017\uffdd\021\uffdd" +
    "\023\uffdd\036\uffdd\050\uffdd\001\002\000\010\053\041\054" +
    "\043\055\042\001\002\000\030\002\uffd9\003\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\017\uffd9\021\uffd9\023\uffd9\036\uffd9\037" +
    "\044\050\uffd9\001\002\000\026\002\uffd5\003\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\017\uffd5\021\uffd5\023\uffd5\036\uffd5\050" +
    "\uffd5\001\002\000\026\002\uffd7\003\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\017\uffd7\021\uffd7\023\uffd7\036\uffd7\050\uffd7\001" +
    "\002\000\006\060\046\061\045\001\002\000\004\040\050" +
    "\001\002\000\004\040\047\001\002\000\026\002\uffd6\003" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\017\uffd6\021\uffd6\023\uffd6" +
    "\036\uffd6\050\uffd6\001\002\000\026\002\uffd8\003\uffd8\013" +
    "\uffd8\014\uffd8\015\uffd8\017\uffd8\021\uffd8\023\uffd8\036\uffd8" +
    "\050\uffd8\001\002\000\004\036\052\001\002\000\026\002" +
    "\uffe3\003\uffe3\013\053\014\054\015\057\017\uffe3\021\uffe3" +
    "\023\uffe3\036\uffe3\050\uffe3\001\002\000\010\024\uffe0\026" +
    "\uffe0\035\uffe0\001\002\000\010\024\uffe2\026\uffe2\035\uffe2" +
    "\001\002\000\026\002\uffe5\003\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\017\uffe5\021\uffe5\023\uffe5\036\uffe5\050\uffe5\001\002" +
    "\000\010\024\015\026\017\035\016\001\002\000\010\024" +
    "\uffe1\026\uffe1\035\uffe1\001\002\000\026\002\uffe4\003\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\017\uffe4\021\uffe4\023\uffe4\036" +
    "\uffe4\050\uffe4\001\002\000\010\024\015\026\017\035\016" +
    "\001\002\000\010\024\015\026\017\035\016\001\002\000" +
    "\014\002\uffe9\003\uffe9\017\uffe9\021\uffe9\023\uffe9\001\002" +
    "\000\014\002\uffeb\003\uffeb\017\uffeb\021\uffeb\023\uffeb\001" +
    "\002\000\010\002\uffef\003\uffef\017\uffef\001\002\000\014" +
    "\002\ufff9\003\ufff9\017\ufff9\021\ufff9\024\100\001\002\000" +
    "\012\002\ufff5\003\ufff5\017\ufff5\021\070\001\002\000\012" +
    "\002\ufff3\003\ufff3\017\ufff3\025\072\001\002\000\010\002" +
    "\ufff0\003\ufff0\017\ufff0\001\002\000\012\002\ufff1\003\ufff1" +
    "\017\ufff1\050\075\001\002\000\010\002\ufff4\003\ufff4\017" +
    "\ufff4\001\002\000\010\002\ufff6\003\ufff6\017\ufff6\001\002" +
    "\000\004\025\072\001\002\000\010\002\ufff2\003\ufff2\017" +
    "\ufff2\001\002\000\012\002\ufffa\003\ufffa\017\ufffa\021\ufffa" +
    "\001\002\000\014\002\ufff7\003\ufff7\017\ufff7\021\ufff7\050" +
    "\102\001\002\000\012\002\ufffc\003\ufffc\017\ufffc\021\ufffc" +
    "\001\002\000\004\024\100\001\002\000\012\002\ufff8\003" +
    "\ufff8\017\ufff8\021\ufff8\001\002\000\004\022\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\104\000\010\002\004\003\007\012\003\001\001\000" +
    "\010\002\105\003\007\012\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\010\001" +
    "\001\000\006\004\066\011\064\001\001\000\010\014\017" +
    "\015\012\017\013\001\001\000\002\001\001\000\004\016" +
    "\061\001\001\000\002\001\001\000\004\017\050\001\001" +
    "\000\004\031\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\033\021\026\022\027\023\032\024\025" +
    "\026\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\055\030\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\063\017\013\001\001\000\004\017" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\100\006\076\001\001\000\004\025" +
    "\070\001\001\000\006\007\073\010\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.scan(); 
    }


//----------------------------------Funções de erro----------------------------------
    public void report_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1 ) + " - Token: " + token +"      |"+ message;
        System.out.println(errorMessage);
    }

    public void report_fatal_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1) + " - Token: " + token +"      |"+ message;
        System.out.println(errorMessage);
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ClassOwl EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ClassOwl ::= PrimitiveClass ClassOwl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ClassOwl ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassOwl ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassOwl",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassHeader ::= CLASS_COLON CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("=========================\n" + "Nova classe detectada: " + i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassHeader",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DisjointClasses ::= DISJOINT_CLASSES_COLON DisjointClassesDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClasses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DisjointClasses ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClasses",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DisjointClassesDescription ::= DisjointClassesList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesDescription",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DisjointClassesDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesDescription",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DisjointClassesList ::= CLASS_IDENTIFIERS COMMA DisjointClassesList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DisjointClassesList ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Individuals ::= INDIVIDUALS_COLON IndividualsDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Individuals",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Individuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Individuals",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IndividualsDescription ::= IndividualsList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsDescription",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IndividualsDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsDescription",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IndividualsList ::= INDIVIDUAL_NAME COMMA IndividualsList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IndividualsList ::= INDIVIDUAL_NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DisjointAndIndividuals ::= DisjointClasses Individuals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointAndIndividuals",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PrimitiveClass ::= ClassHeader PrimitiveClassBody DisjointAndIndividuals 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe primitiva!!---");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClass",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PrimitiveClassBody ::= SUBCLASS_OF_COLON PrimitiveClassBodyDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBody",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PrimitiveClassBodyDescription ::= PrimitiveClassBodyList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyDescription",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PrimitiveClassBodyDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyDescription",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PrimitiveClassBodyList ::= PrimitiveClassBodyListItem COMMA PrimitiveClassBodyList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PrimitiveClassBodyList ::= PrimitiveClassBodyListItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PrimitiveClassBodyList ::= PrimitiveClassBodyListItem LogicalConnector PrimitiveClassBodyListItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PrimitiveClassBodyListItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItem",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$0 ::= 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
System.out.println("Nova propriedade detectada: " + p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PrimitiveClassBodyListItem ::= PROPERTY_IDENTIFIERS NT$0 SOME PrimitiveSomeItem 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItem",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PrimitiveClassBodyListItem ::= LEFT_PAREN PrimitiveClassBodyListItem RIGHT_PAREN PrimitiveClassBodyListItemPair 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItem",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PrimitiveClassBodyListItemPair ::= LogicalConnector PrimitiveClassBodyListItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItemPair",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PrimitiveClassBodyListItemPair ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClassBodyListItemPair",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LogicalConnector ::= AND 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalConnector ::= OR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalConnector ::= NOT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PrimitiveSomeItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		System.out.println("---OBJECT PROPERTY---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveSomeItem",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimitiveSomeItem ::= DataType 
            {
              Object RESULT =null;
		System.out.println("---DATA PROPERTY---\n");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveSomeItem",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrimitiveSomeItem ::= LEFT_PAREN PrimitiveClassBodyListItem RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveSomeItem",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DataType ::= DataTypeInteger 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DataType ::= DataTypeFloat 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DataType ::= DataTypeString 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DataTypeInteger ::= NameSpaceHeader COLON INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeInteger",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DataTypeInteger ::= NameSpaceHeader COLON INTEGER LEFT_BRACKET CARDINALITY_INTEGER RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeInteger",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DataTypeFloat ::= NameSpaceHeader COLON FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeFloat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DataTypeFloat ::= NameSpaceHeader COLON INTEGER LEFT_BRACKET CARDINALITY_FLOAT RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeFloat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DataTypeString ::= NameSpaceHeader COLON STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataTypeString",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NameSpaceHeader ::= NAMESPACE_OWL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHeader",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NameSpaceHeader ::= NAMESPACE_RDFS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHeader",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NameSpaceHeader ::= NAMESPACE_XSD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHeader",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
