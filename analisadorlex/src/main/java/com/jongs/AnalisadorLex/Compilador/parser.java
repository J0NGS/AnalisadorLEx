package com.jongs.AnalisadorLex.Compilador;


//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\002\000\002\003\004\000\002\004\004" +
    "\000\002\027\003\000\002\027\002\000\002\005\003\000" +
    "\002\005\005\000\002\006\003\000\002\006\003\000\002" +
    "\031\003\000\002\031\003\000\002\035\003\000\002\035" +
    "\003\000\002\033\005\000\002\043\003\000\002\043\003" +
    "\000\002\043\007\000\002\043\005\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\034\006\000\002" +
    "\044\003\000\002\044\003\000\002\044\007\000\002\044" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\036\003\000\002\036\003\000\002\032\005\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\042\003\000\002\042\005\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\004\000\002\020\002\000\002\021\005\000\002\021\003" +
    "\000\002\021\002\000\002\022\004\000\002\022\002\000" +
    "\002\023\005\000\002\023\003\000\002\023\002\000\002" +
    "\024\004\000\002\025\004\000\002\026\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\010\002\ufffe\003\006\017\007\001\002\000" +
    "\010\002\ufffe\003\006\017\007\001\002\000\004\002\137" +
    "\001\002\000\004\002\uffff\001\002\000\004\024\136\001" +
    "\002\000\004\022\012\001\002\000\010\002\uffc0\003\uffc0" +
    "\017\uffc0\001\002\000\024\002\ufffa\003\ufffa\017\ufffa\021" +
    "\ufffa\023\ufffa\024\041\026\031\035\042\051\045\001\002" +
    "\000\014\002\uffca\003\uffca\017\uffca\021\uffca\023\015\001" +
    "\002\000\010\002\uffbf\003\uffbf\017\uffbf\001\002\000\014" +
    "\002\uffc7\003\uffc7\017\uffc7\021\uffc7\024\026\001\002\000" +
    "\012\002\uffc5\003\uffc5\017\uffc5\021\017\001\002\000\012" +
    "\002\uffc2\003\uffc2\017\uffc2\025\021\001\002\000\010\002" +
    "\uffc1\003\uffc1\017\uffc1\001\002\000\012\002\uffc3\003\uffc3" +
    "\017\uffc3\050\023\001\002\000\010\002\uffc6\003\uffc6\017" +
    "\uffc6\001\002\000\012\002\uffc2\003\uffc2\017\uffc2\025\021" +
    "\001\002\000\010\002\uffc4\003\uffc4\017\uffc4\001\002\000" +
    "\012\002\uffcb\003\uffcb\017\uffcb\021\uffcb\001\002\000\014" +
    "\002\uffc8\003\uffc8\017\uffc8\021\uffc8\050\027\001\002\000" +
    "\014\002\uffc7\003\uffc7\017\uffc7\021\uffc7\024\026\001\002" +
    "\000\012\002\uffc9\003\uffc9\017\uffc9\021\uffc9\001\002\000" +
    "\016\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1" +
    "\001\002\000\014\002\ufffb\003\ufffb\017\ufffb\021\ufffb\023" +
    "\ufffb\001\002\000\016\002\ufff6\003\ufff6\017\ufff6\021\ufff6" +
    "\023\ufff6\050\ufff6\001\002\000\014\002\ufffc\003\ufffc\017" +
    "\ufffc\021\ufffc\023\ufffc\001\002\000\020\002\ufff3\003\ufff3" +
    "\017\ufff3\021\ufff3\023\ufff3\036\ufff3\050\ufff3\001\002\000" +
    "\020\002\ufff2\003\ufff2\017\ufff2\021\ufff2\023\ufff2\036\ufff2" +
    "\050\ufff2\001\002\000\016\002\ufff9\003\ufff9\017\ufff9\021" +
    "\ufff9\023\ufff9\050\134\001\002\000\016\004\062\005\061" +
    "\006\064\007\060\010\065\011\057\001\002\000\024\002" +
    "\ufff7\003\ufff7\013\uffdb\014\uffdb\015\uffdb\017\ufff7\021\ufff7" +
    "\023\ufff7\050\ufff7\001\002\000\012\024\054\026\031\035" +
    "\042\051\045\001\002\000\010\013\050\014\047\015\052" +
    "\001\002\000\020\002\ufff5\003\ufff5\017\ufff5\021\ufff5\023" +
    "\ufff5\036\ufff5\050\ufff5\001\002\000\016\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\001\002\000\020\002" +
    "\ufff4\003\ufff4\017\ufff4\021\ufff4\023\ufff4\036\ufff4\050\ufff4" +
    "\001\002\000\006\024\uffdd\035\uffdd\001\002\000\006\024" +
    "\uffde\035\uffde\001\002\000\006\024\054\035\042\001\002" +
    "\000\006\024\uffdc\035\uffdc\001\002\000\020\002\uffdf\003" +
    "\uffdf\017\uffdf\021\uffdf\023\uffdf\036\uffdf\050\uffdf\001\002" +
    "\000\026\002\uffdb\003\uffdb\013\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\021\uffdb\023\uffdb\036\uffdb\050\uffdb\001\002\000\004" +
    "\036\056\001\002\000\026\002\uffda\003\uffda\013\uffda\014" +
    "\uffda\015\uffda\017\uffda\021\uffda\023\uffda\036\uffda\050\uffda" +
    "\001\002\000\006\057\uffe2\060\uffe2\001\002\000\006\057" +
    "\uffe4\060\uffe4\001\002\000\014\024\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\035\uffeb\001\002\000\014\024\uffec\027\uffec\030" +
    "\uffec\031\uffec\035\uffec\001\002\000\014\024\123\027\073" +
    "\030\072\031\077\035\124\001\002\000\014\024\uffea\027" +
    "\uffea\030\uffea\031\uffea\035\uffea\001\002\000\006\057\uffe3" +
    "\060\uffe3\001\002\000\006\057\071\060\067\001\002\000" +
    "\016\024\uffcd\027\uffcd\030\uffcd\031\uffcd\035\uffcd\040\uffcd" +
    "\001\002\000\014\024\075\027\073\030\072\031\077\035" +
    "\076\001\002\000\016\024\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\035\uffcc\040\uffcc\001\002\000\004\056\uffd4\001\002\000" +
    "\004\056\uffd5\001\002\000\022\002\uffe7\003\uffe7\017\uffe7" +
    "\021\uffe7\023\uffe7\036\uffe7\037\111\050\uffe7\001\002\000" +
    "\020\002\uffe8\003\uffe8\017\uffe8\021\uffe8\023\uffe8\036\uffe8" +
    "\050\uffe8\001\002\000\006\026\031\051\045\001\002\000" +
    "\004\056\uffd3\001\002\000\020\002\uffe9\003\uffe9\017\uffe9" +
    "\021\uffe9\023\uffe9\036\uffe9\050\uffe9\001\002\000\004\056" +
    "\102\001\002\000\010\053\103\054\106\055\104\001\002" +
    "\000\022\002\uffd8\003\uffd8\017\uffd8\021\uffd8\023\uffd8\036" +
    "\uffd8\037\uffd8\050\uffd8\001\002\000\022\002\uffd6\003\uffd6" +
    "\017\uffd6\021\uffd6\023\uffd6\036\uffd6\037\uffd6\050\uffd6\001" +
    "\002\000\022\002\uffd9\003\uffd9\017\uffd9\021\uffd9\023\uffd9" +
    "\036\uffd9\037\uffd9\050\uffd9\001\002\000\022\002\uffd7\003" +
    "\uffd7\017\uffd7\021\uffd7\023\uffd7\036\uffd7\037\uffd7\050\uffd7" +
    "\001\002\000\004\036\110\001\002\000\020\002\uffe5\003" +
    "\uffe5\017\uffe5\021\uffe5\023\uffe5\036\uffe5\050\uffe5\001\002" +
    "\000\014\041\114\042\113\043\116\044\115\045\117\001" +
    "\002\000\006\057\071\060\067\001\002\000\006\057\uffd1" +
    "\060\uffd1\001\002\000\006\057\uffd2\060\uffd2\001\002\000" +
    "\006\057\uffcf\060\uffcf\001\002\000\006\057\uffd0\060\uffd0" +
    "\001\002\000\006\057\uffce\060\uffce\001\002\000\004\040" +
    "\121\001\002\000\020\002\uffe6\003\uffe6\017\uffe6\021\uffe6" +
    "\023\uffe6\036\uffe6\050\uffe6\001\002\000\022\002\uffef\003" +
    "\uffef\017\uffef\021\uffef\023\uffef\036\uffef\037\130\050\uffef" +
    "\001\002\000\020\002\ufff0\003\ufff0\017\ufff0\021\ufff0\023" +
    "\ufff0\036\ufff0\050\ufff0\001\002\000\006\026\031\051\045" +
    "\001\002\000\020\002\ufff1\003\ufff1\017\ufff1\021\ufff1\023" +
    "\ufff1\036\ufff1\050\ufff1\001\002\000\004\036\127\001\002" +
    "\000\020\002\uffed\003\uffed\017\uffed\021\uffed\023\uffed\036" +
    "\uffed\050\uffed\001\002\000\014\041\114\042\113\043\116" +
    "\044\115\045\117\001\002\000\006\057\071\060\067\001" +
    "\002\000\004\040\133\001\002\000\020\002\uffee\003\uffee" +
    "\017\uffee\021\uffee\023\uffee\036\uffee\050\uffee\001\002\000" +
    "\012\024\041\026\031\035\042\051\045\001\002\000\014" +
    "\002\ufff8\003\ufff8\017\ufff8\021\ufff8\023\ufff8\001\002\000" +
    "\004\022\ufffd\001\002\000\004\002\001\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\010\002\004\003\007\025\003\001\001\000" +
    "\010\002\137\003\007\025\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\012\026" +
    "\010\001\001\000\002\001\001\000\026\005\031\006\036" +
    "\027\033\031\032\032\043\033\034\034\035\035\045\036" +
    "\037\042\042\001\001\000\006\020\015\024\013\001\001" +
    "\000\002\001\001\000\004\021\024\001\001\000\004\022" +
    "\017\001\001\000\004\023\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\037\062\040\065\001\001\000\002\001\001\000\020" +
    "\031\054\032\043\033\034\034\035\035\045\036\037\042" +
    "\042\001\001\000\004\041\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\121\015\100\043" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\067\001\001\000\002\001\001\000\010\013\073\015" +
    "\100\044\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\033\034\034\035\035\106\036\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\111\001\001\000\004\017\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\033" +
    "\034\034\035\035\125\036\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\130\001" +
    "\001\000\004\017\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\134\006\036\031\032\032\043\033" +
    "\034\034\035\035\045\036\037\042\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return super.scan(); 
    }


//----------------------------------Funções de erro----------------------------------
    public void report_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1 ) + " - Token: " + token +"      |"+ message;
        System.out.println(errorMessage);
    }

    public void report_fatal_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1) + " - Token: " + token +"      |"+ message;
        System.out.println(errorMessage);
        System.exit(-1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Class EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Class ::= PrimitiveClass Class 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Class",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Class ::= error 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Class",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Class ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Class",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassHeader ::= CLASS_COLON CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("=========================\n" + "Nova classe detectada: " + i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassHeader",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SubClassOf ::= SUBCLASS_OF_COLON SubClassOfDescription 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOf",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SubClassOfDescription ::= SubClassOfList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfDescription",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SubClassOfDescription ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfDescription",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SubClassOfList ::= SubClassOfItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SubClassOfList ::= SubClassOfItem COMMA SubClassOfList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SubClassOfItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfItem",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SubClassOfItem ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubClassOfItem",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Expr ::= LogicalExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Expr ::= PropertyExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PropertyExpr ::= QuantifierExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyExpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PropertyExpr ::= CardinalityExpr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PropertyExpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // QuantifierExpr ::= Property QuantifierConnector QuantifierExprItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierExpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // QuantifierExprItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierExprItem",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // QuantifierExprItem ::= DataType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierExprItem",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // QuantifierExprItem ::= DataType LEFT_BRACKET ComparisonOperator Cardinality RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierExprItem",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // QuantifierExprItem ::= LEFT_PAREN PropertyExpr RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierExprItem",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // QuantifierConnector ::= SOME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierConnector",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // QuantifierConnector ::= ALL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierConnector",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // QuantifierConnector ::= VALUE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("QuantifierConnector",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CardinalityExpr ::= Property CardinalityConnector Cardinality CardinalityExprItem 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityExpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CardinalityExprItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityExprItem",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CardinalityExprItem ::= DataType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityExprItem",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CardinalityExprItem ::= DataType LEFT_BRACKET ComparisonOperator Cardinality RIGHT_BRACKET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityExprItem",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CardinalityExprItem ::= LEFT_PAREN PropertyExpr RIGHT_PAREN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityExprItem",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CardinalityConnector ::= MIN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityConnector",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CardinalityConnector ::= MAX 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityConnector",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CardinalityConnector ::= EXACTLY 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CardinalityConnector",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Property ::= PROPERTY_IDENTIFIERS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\nNova propriedade detectada: " + p);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Property",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Property ::= SSN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\nNova propriedade detectada: " + s);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Property",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalExpr ::= LogicalExprItem LogicalConnector LogicalExprItem 
            {
              Object RESULT =null;
		System.out.println("\n---!!Operação lógica!!---");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExpr",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LogicalConnector ::= NOT 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\nOperador lógico detectado: " + n);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LogicalConnector ::= AND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\nOperador lógico detectado: " + a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LogicalConnector ::= OR 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\nOperador lógico detectado: " + o);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalConnector",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LogicalExprItem ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("\nitem de expressão lógica: " + c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExprItem",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LogicalExprItem ::= LEFT_PAREN Expr RIGHT_PAREN 
            {
              Object RESULT =null;
		System.out.println("\n Expressão como item de expressão lógica ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalExprItem",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DataType ::= NameSpaceHead COLON Type 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DataType",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Type ::= INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Type ::= FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Type ::= STRING 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NameSpaceHead ::= NAMESPACE_OWL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHead",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NameSpaceHead ::= NAMESPACE_RDFS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHead",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NameSpaceHead ::= NAMESPACE_XSD 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NameSpaceHead",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ComparisonOperator ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ComparisonOperator ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ComparisonOperator ::= EQUAL 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ComparisonOperator ::= EQUAL_LESS_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ComparisonOperator ::= EQUAL_GREATER_THAN 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ComparisonOperator",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Cardinality ::= CARDINALITY_INTEGER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cardinality",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Cardinality ::= CARDINALITY_FLOAT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Cardinality",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DisjointClasses ::= DISJOINT_CLASSES_COLON DisjointClassesList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClasses",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DisjointClasses ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClasses",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DisjointClassesList ::= CLASS_IDENTIFIERS COMMA DisjointClassesList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DisjointClassesList ::= CLASS_IDENTIFIERS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DisjointClassesList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointClassesList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Individuals ::= INDIVIDUALS_COLON IndividualsList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Individuals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Individuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Individuals",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IndividualsList ::= INDIVIDUAL_NAME COMMA IndividualsList 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IndividualsList ::= INDIVIDUAL_NAME 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IndividualsList ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("IndividualsList",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DisjointAndIndividuals ::= DisjointClasses Individuals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DisjointAndIndividuals",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PrimitiveClass ::= ClassHeader PrimitiviClassBody 
            {
              Object RESULT =null;
		System.out.println("\n---!!Classe primitiva!!---");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiveClass",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PrimitiviClassBody ::= SubClassOf DisjointAndIndividuals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PrimitiviClassBody",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
