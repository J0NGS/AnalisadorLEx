import java_cup.runtime.*;
parser code {:
//----------------------------------Funções de erro----------------------------------
    public void report_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1 ) + " - Token: " + token +"      |"+ message;
        System.out.println(errorMessage);
    }

    public void report_fatal_error(String message, Object info)  {
        // Obtém o número da linha onde ocorreu o erro
        int line = ((Symbol) info).left;
        // Obtém o token que causou o erro
        Symbol tokenSymbol = (Symbol) info;
        String token = tokenSymbol.value.toString();
        
        // Especifica o tipo de erro e o contexto
        String errorMessage = "Syntax Error at line " + (line + 1) + " - Token: " + token +"      |"+ message;
        System.out.println(errorMessage);
        System.exit(-1);
    }

:}

/*definindo scan*/
scan with {: return super.scan(); :};

/*----------------------------------TOKENS----------------------------------*/
terminal String SOME, ALL, VALUE, MIN, MAX, EXACTLY, THAT, NOT, AND, OR, ONLY, CLASS_COLON, EQUIVALENT_TO_COLON, INDIVIDUALS_COLON, SUBCLASS_OF_COLON;
terminal String DISJOINT_CLASSES_COLON, CLASS_IDENTIFIERS, INDIVIDUAL_NAME, PROPERTY_IDENTIFIERS, NAMESPACE_OWL, NAMESPACE_RDFS, NAMESPACE_XSD;
terminal String COMMENT, LEFT_BRACE, RIGHT_BRACE, LEFT_PAREN, RIGHT_PAREN, LEFT_BRACKET, RIGHT_BRACKET, GREATER_THAN, LESS_THAN, EQUAL, EQUAL_LESS_THAN;
terminal String EQUAL_GREATER_THAN, DOUBLE_QUOTE, BROKEN_LINE, COMMA, SSN, CLASS_IDENTIFERS, INTEGER, FLOAT, STRING, COLON, INVERSE;
terminal Float CARDINALITY_FLOAT;
terminal Integer CARDINALITY_INTEGER; 
/*----------------------------------PRODUÇÕES----------------------------------*/
non terminal Object ClassOwl, ClassHeader, DisjointClasses, DisjointClassesDescription,DisjointClassesList,IndividualsDescription;
non terminal Object IndividualsList, DisjointAndIndividuals,PrimitiveClass, PrimitiveClassBody, PrimitiveClassBodyDescription, PrimitiveClassBodyList, LogicalConnector;
non terminal Object PrimitiveClassBodyListItem, PrimitiveSomeItem, DataType, DataTypeInteger, DataTypeFloat, DataTypeString, Individuals;
non terminal Object NameSpaceHeader, SubClassOf, PrimitiveClassBodyListItemPair;
precedence left NOT, AND, OR;   
start with ClassOwl;

ClassOwl::= PrimitiveClass ClassOwl | error | /*e*/;
ClassHeader::= CLASS_COLON CLASS_IDENTIFIERS:i {:System.out.println("=========================\n" + "Nova classe detectada: " + i);:};


DisjointClasses::= DISJOINT_CLASSES_COLON DisjointClassesDescription | /*e*/;
DisjointClassesDescription::= DisjointClassesList | /*e*/;
DisjointClassesList::= CLASS_IDENTIFIERS COMMA DisjointClassesList | CLASS_IDENTIFIERS;
Individuals::= INDIVIDUALS_COLON IndividualsDescription | /*e*/;
IndividualsDescription::= IndividualsList | /*e*/;
IndividualsList::= INDIVIDUAL_NAME COMMA IndividualsList | INDIVIDUAL_NAME; 
DisjointAndIndividuals::= DisjointClasses Individuals;

PrimitiveClass::= ClassHeader PrimitiveClassBody DisjointAndIndividuals {:System.out.println("\n---!!Classe primitiva!!---");:};
PrimitiveClassBody::= SUBCLASS_OF_COLON PrimitiveClassBodyDescription;
PrimitiveClassBodyDescription::= PrimitiveClassBodyList | /*e*/;
PrimitiveClassBodyList::= PrimitiveClassBodyListItem COMMA PrimitiveClassBodyList | PrimitiveClassBodyListItem | PrimitiveClassBodyListItem LogicalConnector PrimitiveClassBodyListItem;
PrimitiveClassBodyListItem::= CLASS_IDENTIFIERS | PROPERTY_IDENTIFIERS:p {:System.out.println("Nova propriedade detectada: " + p);:} SOME PrimitiveSomeItem | LEFT_PAREN PrimitiveClassBodyListItem RIGHT_PAREN PrimitiveClassBodyListItemPair;
PrimitiveClassBodyListItemPair::= LogicalConnector PrimitiveClassBodyListItem | /*e*/;
LogicalConnector::= AND | OR | NOT;
PrimitiveSomeItem::= CLASS_IDENTIFIERS {:System.out.println("---OBJECT PROPERTY---\n");:} | DataType {:System.out.println("---DATA PROPERTY---\n");:} | LEFT_PAREN PrimitiveClassBodyListItem RIGHT_PAREN;
DataType::= DataTypeInteger | DataTypeFloat | DataTypeString;
DataTypeInteger::= NameSpaceHeader COLON INTEGER | NameSpaceHeader COLON INTEGER LEFT_BRACKET CARDINALITY_INTEGER RIGHT_BRACKET;
DataTypeFloat::= NameSpaceHeader COLON FLOAT | NameSpaceHeader COLON INTEGER LEFT_BRACKET CARDINALITY_FLOAT RIGHT_BRACKET;
DataTypeString::= NameSpaceHeader COLON STRING;
NameSpaceHeader::= NAMESPACE_OWL | NAMESPACE_RDFS | NAMESPACE_XSD;